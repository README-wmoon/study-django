✺ 일반적으로 기존 객체에 자주 영향을미치는 메소드는 자신(self)을 리턴하지 않도록 하는 것이
  Python에서 좋은 사례로 간주된다. 만약 객체로 접근한 메소드가 자신(self)를 리턴하게 되면
  계속 이어서 코드를 작성하게 되고(메소드 체인), 이 때 특정 버그나 문제가 발생했을 때
  찾기 힘들 뿐더러 전체 기능에 문제가 생길 수 있다.
 
생성(CREATE)
	1. create()
		모델명.objects.create()
		전달한 값으로 초기화한 뒤 새로운 객체를 생성하고 테이블에 저장한다.

	2. save()
		객체명.save()
		전달한 값으로 테이블에 저장된다.
		대부분 수정할때나 내가 정의하고 싶을떄 쓰인다.

	3. bulk_create()
		모델명.objects.bulk_create([])
		전달한 list로 초기화 된 여러 개의 객체를 생성하고 테이블에 저장한다.
		생성된 객체들은 list 타입으로 리턴된다.		

	4. get_or_create()
		모델명.objects.get_or_create()
			1. 만들어진 객체 또는 가져온 객체
			2. 만들어진 또는 가져온 boolean 타입
		테이블에 객체가 있으면 가져오고, 없으면 테이블에 저장되고 만들어진 객체를 리턴한다.
		추가 정보는 defaults={}로 전달해서 create일 경우 사용된다.
		두 칸짜리 tuple 타입으로 리턴되며, 첫 번째는 객체, 두 번째는 생성여부인 bool타입이 생긴다.

조회(READ)
	1. get() -> 한개 가져올 때 쓰인다
		모델명.objects.get()
		테이블에서 조건에 맞는 한 개의 객체를 조회한다.
		조회된 값이 없으면 DoseNotExist, 2개 이상이면 MultipleObjectsReturned가 발생하기 때문에
		조회할 값이 1개일 때만 사용한다.

	2. all() -> 객체정보
		모델명.objects.all()
		테이블에서 전체 정보를 조회한다.
		QuerySet 객체를 리턴하며, 조회된 객체들이 들어있다.
		QuerySet이란, 쿼리의 결과를 전달받은 모델 객체 목록이다.
		list와 구조는 같지만, 파이썬 기본 자료구조가 아니기 대문에 형변환이나 serializers(직렬화)(객체를 문자열로)가 필요하다.

	3. values() -> 딕셔너리 객체 정보
		테이블에서 전체 정보를 조회한다.
		QuerySet 객체를 리턴하며, 조회된 객체가 dict 타입으로 들어있다.
		필드 이름을 전달하면 원하는 필드 정보만 가져올 수 있다.
		참조 중인 테이블의 필드를 가져오기 위해서는 '[참조중인 객체명]__[필드명]'으로 작성한다.
		ex) Reply.objects.values('member_name', 'post_member_name').query

	4. values_list()
		테이블에서 전체 정보를 조회한다.
		QuerySet 객체를 리턴하며, 조회된 객체가 tuple 타입으로 들어있다.
		모든 필드를 순서대로 가져오고 싶을 때 인덱스로 접근해서 가져올 수 있다.

	5. filter() -> 조건이 true인것
		조건에 맞는 행을 조회한다.
		QuerySet 객체를 리턴하며, 조회된 객체들이 들어있다.
		조건에 맞는 결과가 한 개도 없을 경우 비어있는 QuerySet이 리턴된다.
		Member.objects.filter(member_name_endswith='짱')

	6. exist()
		filter()와 함께 사용해서 filter 조건에 맞는 데이터가 있는 지 조회한다.

	7. exclude() -> 조건이 filter()랑 다른것
		조건에 맞지 않는 행을 조회한다.
		QuerySet 객체를 리턴하며, 조회된 객체들이 들어있다.
		조건에 맞는 결과가 한 개도 없을 경우 비어있는 QuerySet이 리턴된다.

	8. And OR -> 검색 담당
		모델명.objects.filter() & 모델명.objects.filter()
		모델명.objects.filter() | 모델명.objects.filter()

		모델명.objects.filter(key=value, key=value) -> ,는 and
		모델명.objects.filter(Q(key=value) | Q(key=value))

		ex) if(request.GET.region):
				conditions &= Q(key=value)

		if(request.GET.filter1):

		filter(conditions)

	9. first(), last()
		모델명.objects.filter().first()
		조건에 맞는 QuerySet 결과 중 첫 번째 객체만 가져오기
		
		모델명.objects.filter().last()
		조건에 맞는 QuerySet 결과 중 마지막 객체만 가져오기

	10. count()
		모델명.objects.filter().count()
		조건에 맞는 결과의 총 개수를 리턴한다.

	11. order_by()
		모델명.objects.order_by('필드명')
		모델명.objects.order_by('-필드명')
		
		각 오름차순과 내림차순 정렬이다.

	12. annotate()
		모델명.objects.annotate().values()
		모델명.objects.values().annotate() -> 집계함수 -> 결과 컬럼을 쓰일때
		결과 테이블에서 컬럼을 다른 이름으로 사용하거나 다른 연산을 수행한 뒤 새로운 이름을 만들어낸다.
		
		ex) Post.objects.annotate(member_name=F('member_member_name')).values('member_name')

	13. aggregate()
		QuerySet객체.aggregate(key=집계함수('필드명')) -> key는 Alias를 써놓은것이다.
		QuerySet객체.values("묶을 필드명").annotate(key=집계함수('필드명'))

		각 전체 대상과 그룹 대상이다.

수정(UPDATE)
	1. save()
		존재하는 객체의 조회한 뒤 전체 필드를 수정하고 혹시 없는 객체라면 추가한다.
		수정 목적으로 사용할 때에는 어떤 필드가 수정되었는 지를 정확히 알려주어야 한다.
		save(update_fields=['',...])와 같이 수정할 컬럼명을 작성해서 전달한다.

	2. update() 
		QuerySet객체로 사용할 수 있으며, 해당 객체들을 수정하고 수정된 행의 수를 리턴한다. -> filter.update -> 조건에 맞게 써줄때

삭제(DELETE)
	delete()
		객체.delete()로 사용하며 조건에 맞는 모든 행을 삭제한다.
		get(), filter(), all()과 같이 사용한다.

	with_transaction.atomic